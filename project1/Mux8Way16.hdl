// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux8Way16.hdl
/**
 * 8-way 16-bit multiplexor:
 * out = a if sel = 000
 *       b if sel = 001
 *       c if sel = 010
 *       d if sel = 011
 *       e if sel = 100
 *       f if sel = 101
 *       g if sel = 110
 *       h if sel = 111
 */
CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // Not versions of sel bits
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    Not(in=sel[2], out=notSel2);

    // Permutations of sel[0..1]
    And(a=notSel0, b=notSel1, out=sel0);
    And(a=sel[0],  b=notSel1, out=sel1);
    And(a=notSel0, b=sel[1],  out=sel2);
    And(a=sel[0],  b=sel[1],  out=sel3);

    // Generate letter selectors
    And(a=sel0, b=notSel2, out=selA);
    And(a=sel1, b=notSel2, out=selB);
    And(a=sel2, b=notSel2, out=selC);
    And(a=sel3, b=notSel2, out=selD);
    And(a=sel0, b=sel[2],  out=selE);
    And(a=sel1, b=sel[2],  out=selF);
    And(a=sel2, b=sel[2],  out=selG);
    And(a=sel3, b=sel[2],  out=selH);

    //
    // Process wires
    //
    // Process A wires
    And(a=a[0], b=selA, out=outA0);
    And(a=a[1], b=selA, out=outA1);
    And(a=a[2], b=selA, out=outA2);
    And(a=a[3], b=selA, out=outA3);
    And(a=a[4], b=selA, out=outA4);
    And(a=a[5], b=selA, out=outA5);
    And(a=a[6], b=selA, out=outA6);
    And(a=a[7], b=selA, out=outA7);
    And(a=a[8], b=selA, out=outA8);
    And(a=a[9], b=selA, out=outA9);
    And(a=a[10], b=selA, out=outA10);
    And(a=a[11], b=selA, out=outA11);
    And(a=a[12], b=selA, out=outA12);
    And(a=a[13], b=selA, out=outA13);
    And(a=a[14], b=selA, out=outA14);
    And(a=a[15], b=selA, out=outA15);

    // Process B wires
    And(a=b[0], b=selB, out=outB0);
    And(a=b[1], b=selB, out=outB1);
    And(a=b[2], b=selB, out=outB2);
    And(a=b[3], b=selB, out=outB3);
    And(a=b[4], b=selB, out=outB4);
    And(a=b[5], b=selB, out=outB5);
    And(a=b[6], b=selB, out=outB6);
    And(a=b[7], b=selB, out=outB7);
    And(a=b[8], b=selB, out=outB8);
    And(a=b[9], b=selB, out=outB9);
    And(a=b[10], b=selB, out=outB10);
    And(a=b[11], b=selB, out=outB11);
    And(a=b[12], b=selB, out=outB12);
    And(a=b[13], b=selB, out=outB13);
    And(a=b[14], b=selB, out=outB14);
    And(a=b[15], b=selB, out=outB15);

    // Process C wires
    And(a=c[0], b=selC, out=outC0);
    And(a=c[1], b=selC, out=outC1);
    And(a=c[2], b=selC, out=outC2);
    And(a=c[3], b=selC, out=outC3);
    And(a=c[4], b=selC, out=outC4);
    And(a=c[5], b=selC, out=outC5);
    And(a=c[6], b=selC, out=outC6);
    And(a=c[7], b=selC, out=outC7);
    And(a=c[8], b=selC, out=outC8);
    And(a=c[9], b=selC, out=outC9);
    And(a=c[10], b=selC, out=outC10);
    And(a=c[11], b=selC, out=outC11);
    And(a=c[12], b=selC, out=outC12);
    And(a=c[13], b=selC, out=outC13);
    And(a=c[14], b=selC, out=outC14);
    And(a=c[15], b=selC, out=outC15);

    // Process D wires
    And(a=d[0], b=selD, out=outD0);
    And(a=d[1], b=selD, out=outD1);
    And(a=d[2], b=selD, out=outD2);
    And(a=d[3], b=selD, out=outD3);
    And(a=d[4], b=selD, out=outD4);
    And(a=d[5], b=selD, out=outD5);
    And(a=d[6], b=selD, out=outD6);
    And(a=d[7], b=selD, out=outD7);
    And(a=d[8], b=selD, out=outD8);
    And(a=d[9], b=selD, out=outD9);
    And(a=d[10], b=selD, out=outD10);
    And(a=d[11], b=selD, out=outD11);
    And(a=d[12], b=selD, out=outD12);
    And(a=d[13], b=selD, out=outD13);
    And(a=d[14], b=selD, out=outD14);
    And(a=d[15], b=selD, out=outD15);

    // Process E wires
    And(a=e[0], b=selE, out=outE0);
    And(a=e[1], b=selE, out=outE1);
    And(a=e[2], b=selE, out=outE2);
    And(a=e[3], b=selE, out=outE3);
    And(a=e[4], b=selE, out=outE4);
    And(a=e[5], b=selE, out=outE5);
    And(a=e[6], b=selE, out=outE6);
    And(a=e[7], b=selE, out=outE7);
    And(a=e[8], b=selE, out=outE8);
    And(a=e[9], b=selE, out=outE9);
    And(a=e[10], b=selE, out=outE10);
    And(a=e[11], b=selE, out=outE11);
    And(a=e[12], b=selE, out=outE12);
    And(a=e[13], b=selE, out=outE13);
    And(a=e[14], b=selE, out=outE14);
    And(a=e[15], b=selE, out=outE15);

    // Process F wires
    And(a=f[0], b=selF, out=outF0);
    And(a=f[1], b=selF, out=outF1);
    And(a=f[2], b=selF, out=outF2);
    And(a=f[3], b=selF, out=outF3);
    And(a=f[4], b=selF, out=outF4);
    And(a=f[5], b=selF, out=outF5);
    And(a=f[6], b=selF, out=outF6);
    And(a=f[7], b=selF, out=outF7);
    And(a=f[8], b=selF, out=outF8);
    And(a=f[9], b=selF, out=outF9);
    And(a=f[10], b=selF, out=outF10);
    And(a=f[11], b=selF, out=outF11);
    And(a=f[12], b=selF, out=outF12);
    And(a=f[13], b=selF, out=outF13);
    And(a=f[14], b=selF, out=outF14);
    And(a=f[15], b=selF, out=outF15);

    // Process G wires
    And(a=g[0], b=selG, out=outG0);
    And(a=g[1], b=selG, out=outG1);
    And(a=g[2], b=selG, out=outG2);
    And(a=g[3], b=selG, out=outG3);
    And(a=g[4], b=selG, out=outG4);
    And(a=g[5], b=selG, out=outG5);
    And(a=g[6], b=selG, out=outG6);
    And(a=g[7], b=selG, out=outG7);
    And(a=g[8], b=selG, out=outG8);
    And(a=g[9], b=selG, out=outG9);
    And(a=g[10], b=selG, out=outG10);
    And(a=g[11], b=selG, out=outG11);
    And(a=g[12], b=selG, out=outG12);
    And(a=g[13], b=selG, out=outG13);
    And(a=g[14], b=selG, out=outG14);
    And(a=g[15], b=selG, out=outG15);

    // Process H wires
    And(a=h[0], b=selH, out=outH0);
    And(a=h[1], b=selH, out=outH1);
    And(a=h[2], b=selH, out=outH2);
    And(a=h[3], b=selH, out=outH3);
    And(a=h[4], b=selH, out=outH4);
    And(a=h[5], b=selH, out=outH5);
    And(a=h[6], b=selH, out=outH6);
    And(a=h[7], b=selH, out=outH7);
    And(a=h[8], b=selH, out=outH8);
    And(a=h[9], b=selH, out=outH9);
    And(a=h[10], b=selH, out=outH10);
    And(a=h[11], b=selH, out=outH11);
    And(a=h[12], b=selH, out=outH12);
    And(a=h[13], b=selH, out=outH13);
    And(a=h[14], b=selH, out=outH14);
    And(a=h[15], b=selH, out=outH15);

    //
    // Intermediate Ors - 2
    //
    Or(a=outA0, b=outB0, out=orAB0);
    Or(a=outA1, b=outB1, out=orAB1);
    Or(a=outA2, b=outB2, out=orAB2);
    Or(a=outA3, b=outB3, out=orAB3);
    Or(a=outA4, b=outB4, out=orAB4);
    Or(a=outA5, b=outB5, out=orAB5);
    Or(a=outA6, b=outB6, out=orAB6);
    Or(a=outA7, b=outB7, out=orAB7);
    Or(a=outA8, b=outB8, out=orAB8);
    Or(a=outA9, b=outB9, out=orAB9);
    Or(a=outA10, b=outB10, out=orAB10);
    Or(a=outA11, b=outB11, out=orAB11);
    Or(a=outA12, b=outB12, out=orAB12);
    Or(a=outA13, b=outB13, out=orAB13);
    Or(a=outA14, b=outB14, out=orAB14);
    Or(a=outA15, b=outB15, out=orAB15);

    Or(a=outC0, b=outD0, out=orCD0);
    Or(a=outC1, b=outD1, out=orCD1);
    Or(a=outC2, b=outD2, out=orCD2);
    Or(a=outC3, b=outD3, out=orCD3);
    Or(a=outC4, b=outD4, out=orCD4);
    Or(a=outC5, b=outD5, out=orCD5);
    Or(a=outC6, b=outD6, out=orCD6);
    Or(a=outC7, b=outD7, out=orCD7);
    Or(a=outC8, b=outD8, out=orCD8);
    Or(a=outC9, b=outD9, out=orCD9);
    Or(a=outC10, b=outD10, out=orCD10);
    Or(a=outC11, b=outD11, out=orCD11);
    Or(a=outC12, b=outD12, out=orCD12);
    Or(a=outC13, b=outD13, out=orCD13);
    Or(a=outC14, b=outD14, out=orCD14);
    Or(a=outC15, b=outD15, out=orCD15);

    Or(a=outE0, b=outF0, out=orEF0);
    Or(a=outE1, b=outF1, out=orEF1);
    Or(a=outE2, b=outF2, out=orEF2);
    Or(a=outE3, b=outF3, out=orEF3);
    Or(a=outE4, b=outF4, out=orEF4);
    Or(a=outE5, b=outF5, out=orEF5);
    Or(a=outE6, b=outF6, out=orEF6);
    Or(a=outE7, b=outF7, out=orEF7);
    Or(a=outE8, b=outF8, out=orEF8);
    Or(a=outE9, b=outF9, out=orEF9);
    Or(a=outE10, b=outF10, out=orEF10);
    Or(a=outE11, b=outF11, out=orEF11);
    Or(a=outE12, b=outF12, out=orEF12);
    Or(a=outE13, b=outF13, out=orEF13);
    Or(a=outE14, b=outF14, out=orEF14);
    Or(a=outE15, b=outF15, out=orEF15);

    Or(a=outG0, b=outH0, out=orGH0);
    Or(a=outG1, b=outH1, out=orGH1);
    Or(a=outG2, b=outH2, out=orGH2);
    Or(a=outG3, b=outH3, out=orGH3);
    Or(a=outG4, b=outH4, out=orGH4);
    Or(a=outG5, b=outH5, out=orGH5);
    Or(a=outG6, b=outH6, out=orGH6);
    Or(a=outG7, b=outH7, out=orGH7);
    Or(a=outG8, b=outH8, out=orGH8);
    Or(a=outG9, b=outH9, out=orGH9);
    Or(a=outG10, b=outH10, out=orGH10);
    Or(a=outG11, b=outH11, out=orGH11);
    Or(a=outG12, b=outH12, out=orGH12);
    Or(a=outG13, b=outH13, out=orGH13);
    Or(a=outG14, b=outH14, out=orGH14);
    Or(a=outG15, b=outH15, out=orGH15);

    //
    // Intermediate Ors - 4
    //
    Or(a=orAB0, b=orCD0, out=orABCD0);
    Or(a=orAB1, b=orCD1, out=orABCD1);
    Or(a=orAB2, b=orCD2, out=orABCD2);
    Or(a=orAB3, b=orCD3, out=orABCD3);
    Or(a=orAB4, b=orCD4, out=orABCD4);
    Or(a=orAB5, b=orCD5, out=orABCD5);
    Or(a=orAB6, b=orCD6, out=orABCD6);
    Or(a=orAB7, b=orCD7, out=orABCD7);
    Or(a=orAB8, b=orCD8, out=orABCD8);
    Or(a=orAB9, b=orCD9, out=orABCD9);
    Or(a=orAB10, b=orCD10, out=orABCD10);
    Or(a=orAB11, b=orCD11, out=orABCD11);
    Or(a=orAB12, b=orCD12, out=orABCD12);
    Or(a=orAB13, b=orCD13, out=orABCD13);
    Or(a=orAB14, b=orCD14, out=orABCD14);
    Or(a=orAB15, b=orCD15, out=orABCD15);

    Or(a=orEF0, b=orGH0, out=orEFGH0);
    Or(a=orEF1, b=orGH1, out=orEFGH1);
    Or(a=orEF2, b=orGH2, out=orEFGH2);
    Or(a=orEF3, b=orGH3, out=orEFGH3);
    Or(a=orEF4, b=orGH4, out=orEFGH4);
    Or(a=orEF5, b=orGH5, out=orEFGH5);
    Or(a=orEF6, b=orGH6, out=orEFGH6);
    Or(a=orEF7, b=orGH7, out=orEFGH7);
    Or(a=orEF8, b=orGH8, out=orEFGH8);
    Or(a=orEF9, b=orGH9, out=orEFGH9);
    Or(a=orEF10, b=orGH10, out=orEFGH10);
    Or(a=orEF11, b=orGH11, out=orEFGH11);
    Or(a=orEF12, b=orGH12, out=orEFGH12);
    Or(a=orEF13, b=orGH13, out=orEFGH13);
    Or(a=orEF14, b=orGH14, out=orEFGH14);
    Or(a=orEF15, b=orGH15, out=orEFGH15);

    //
    // Final Ors - 8 - to out
    //
    Or(a=orABCD0, b=orEFGH0, out=out[0]);
    Or(a=orABCD1, b=orEFGH1, out=out[1]);
    Or(a=orABCD2, b=orEFGH2, out=out[2]);
    Or(a=orABCD3, b=orEFGH3, out=out[3]);
    Or(a=orABCD4, b=orEFGH4, out=out[4]);
    Or(a=orABCD5, b=orEFGH5, out=out[5]);
    Or(a=orABCD6, b=orEFGH6, out=out[6]);
    Or(a=orABCD7, b=orEFGH7, out=out[7]);
    Or(a=orABCD8, b=orEFGH8, out=out[8]);
    Or(a=orABCD9, b=orEFGH9, out=out[9]);
    Or(a=orABCD10, b=orEFGH10, out=out[10]);
    Or(a=orABCD11, b=orEFGH11, out=out[11]);
    Or(a=orABCD12, b=orEFGH12, out=out[12]);
    Or(a=orABCD13, b=orEFGH13, out=out[13]);
    Or(a=orABCD14, b=orEFGH14, out=out[14]);
    Or(a=orABCD15, b=orEFGH15, out=out[15]);
}